#Aquisicao de imagens de satelite manualmente
# https://earthexplorer.usgs.gov/
# https://scihub.copernicus.eu/dhus/#/home

#Como automatizar? APIs
# https://github.com/16EAGLE/getSpatialData
install.packages("sf")
install.packages("raster")
install.packages("rgdal")
install.packages("getSpatialData")
install.packages("stringr")
install.packages("maptools")
install.packages("maps")
install.packages("sen2r")

#Bibliotecas
library(sf)
library(raster)
library(rgdal)
library(getSpatialData)
library(stringr)
library(maptools)
library(maps)
library(tibble)
# Se ainda nao tiver o pacote 'devtools' instalado, realizar a instalacao:
# install.packages('devtools')
devtools::install_github("16EAGLE/getSpatialData",force = T,dependencies = T)

#Criar um usuario para o CoperHub - https://scihub.copernicus.eu/dhus/#/self-registration

#fazer o login dando input na senha
login_USGS("jvnicoletti")
login_CopHub("jvnicoletti")

#Funcao que realiza o login na sua conta, outra opção: no caso teria que atribuir senha e user em uma variável.
login_CopHub(user, password)
login_USGS(user, password)

## Outra forma e definir o AOI (podendo ser uma matriz, sf ou sp objeto)

contorno <- read_sf('D:/Projeto Martello/limite/bound_single.shp');contorno
contorno = st_as_sf(contorno, coords = c("lon","lat")) %>% st_set_crs(4326)

footprint = st_geometry(contorno);footprint
# Define o AOI para esta secao
set_aoi(st_geometry(contorno))
view_aoi() #abre o AOI no viewer

#Define o local onde salvar as imagens
set_archive("D:/Projeto Martello/DataBase/get_data/Sentinel-2")

## Use getSentinel_query para pesquisar as imagens que possuem o AOI

#pegando dados para sentinel 1 e sentinel 2, com definição do range temporal
#records2 = getSentinel_query(time_range = c("2020-03-01", "2020-08-03"), 
#                            platform = "Sentinel-1"); records2
records = getSentinel_records(time_range = c("2016-01-01", "2020-08-12"), 
                            platform = "Sentinel-2",);records

## Filtrar os resultados
# colnames(records) #apresenta todos os atributos diponiveis para a filtragem 
# unique(records$cloudcoverpercentage) 
# No caso não vamos usar pois iremos realizar a filtragem de nuvens em outro script somente em nosso talhao

#filtra por porcetagem de recobrimento de nuvens\

records_flt <- records;records_flt  
 
records_flt = records_flt[records_flt$cloudcov <= 10,];records_flt
records_flt = records_flt[records_flt$level== "Level-1C",];records_flt

records_flt = records_flt[records_flt$level== "Level-2A",];records_flt


teste = records_flt[1:95,]

teste$footprint = footprint
plot(teste)
## Apresenta a tabela com os resultados iniciais
view_records(records)

## Apresenta a tabela com os resultados filtrados
#View(records_filtered)

## Apresenta um dos resultados com a AIO
# 
# colnames(records_filtered) <- c("title","url","url.alt","url.icon","summary","beginposition","endposition","ingestiondate","orbitnumber","relativeorbitnumber","cloudcoverpercentage","highprobacloudspercentage","mediumprobacloudspercentage","snowicepercentage","vegetationpercentage","waterpercentage","notvegetatedpercentage","unclassifiedpercentage","gmlfootprint","format","instrumentshortname","instrumentname","footprint","s2datatakeid","platformidentifier","orbitdirection","platformserialidentifier","processingbaseline","processinglevel","producttype","platformname","size","filename","level1cpdiidentifier","identifier","uuid","datatakesensingstart","sensoroperationalmode","tileid","hv_order_tileid","granuleidentifier","datastripidentifier","gnss" )
# View(records_filtered)

#CRIEI ESSAS LINHAS PARA CASO PARE OS DOWNLOADS PARAREM POR ALGUM MOTIVO, PARA ATUALIZAR O QUE PRECISA SER BAIXADO AINDA
#records_filtered <- records2;records_filtered
adquirido <- list.files("D:/Projeto Martello/DataBase/get_data/Sentinel-2", full.names = F);adquirido
adquirido <- gsub(".zip","",adquirido);adquirido
records_filtered<-records_filtered[!(records_filtered$title %in% adquirido), ]
#--------------------------------------------------------------------------------------------------------------------------#

## Download do dataset para o arquivo definido em set_archive
order_data(teste)
datasets <- getSentinel_data(records_flt[1:5,])
#datasets <- getSentinel_data(records)
#datasets <- getSentinel_data(records2)
## Define o formato do output
# datasets = list.files("C:/Projeto Martello/Sentinel/", full.names = T)
# View(texto)
# #VRT
# datasets_prep <- prepSentinel(datasets, format = "vrt")
# datasets_prep <- prep(datasets, format = "vrt")
# 
# # ## Visualizacao dos dados
# # datasets_prep[[1]][[1]][1] #10 m 
# # datasets_prep[[1]][[1]][2] #20 m 
# # datasets_prep[[1]][[1]][3] #60 m 
# 
# ## Abre os arquivos direto do diretorio no R
# r = stack(datasets_prep[[1]][[1]][1])
# plot(r)
# 
# contorno = as(contorno, 'Spatial')
# 
# r = mask(crop(r, contorno), contorno)
